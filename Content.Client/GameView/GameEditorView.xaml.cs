using System.Threading.Tasks;
using Content.Client.Simulation;
using Content.Client.Simulation.ParticleKinds.Abstract;
using Content.Client.Simulation.Saving;
using Robust.Client;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.GameObjects;
using Robust.Shared.Maths;
using Robust.Shared.Sandboxing;

namespace Content.Client.GameView;

[GenerateTypedNameReferences]
public sealed partial class GameEditorView : BoxContainer
{
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;
    [Dependency] private readonly ISandboxHelper _sandboxHelper = default!;
    private SimulationSystem _simSys = default!;

    private ParticleType? _currentlyAnalyzing = null;
    private Control? _analyzerControl = null;

    public GameEditorView()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _simSys = _entitySystemManager.GetEntitySystem<SimulationSystem>();
        
        //LayoutContainer.SetAnchorAndMarginPreset(this, LayoutPreset.Wide);
        IoCManager.Resolve<IConfigurationManager>().SetCVar("display.uiScale", 0.0f);

        SimControl.MinSize = new Vector2(SimulationConfig.SimWidth, SimulationConfig.SimHeight);
        Pause.OnToggled += args =>
        {
            _simSys.Simulation.Paused = args.Pressed;
        };

        EraseMode.OnPressed += args =>
        {
            SimControl.Sim.Placing = ParticleType.None;
        };

        Clear.OnPressed += args =>
        {
            _simSys.Simulation.Clear();
        };

        Save.OnPressed += async args =>
        {
            var saveFile = new SaveData(_simSys.Simulation);
            var stream = await IoCManager.Resolve<IFileDialogManager>().OpenFile();
            if (stream is null)
                return; // oops
            stream.SetLength(0);
            stream.Write(saveFile.WriteFile());
            stream.Close();
        };

        Load.OnPressed += async args =>
        {
            var stream = await IoCManager.Resolve<IFileDialogManager>().OpenFile();
            if (stream is null)
                return; // oops
            var bufLen = stream.Length;
            var buffer = new byte[bufLen];
            stream.Read(buffer);
            _simSys.Simulation = new Simulation.Simulation(new SaveData(buffer));
            stream.Close();
        };

        Discord.OnPressed += args =>
        {
            IoCManager.Resolve<IUriOpener>().OpenUri("https://discord.gg/Mr962SaRD3");
        };
        
        foreach (var impl in _simSys.Simulation.Implementations)
        {
            if (impl.Type == ParticleType.None)
                continue;

            var placeButton = new Button()
            {
                Text = impl.Name
            };

            placeButton.OnPressed += args =>
            {
                SimControl.Sim.Placing = impl.Type;
            };
            
            ElementPlaceButtons.AddChild(placeButton);
        }
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        this.MinSize = IoCManager.Resolve<IClyde>().MainWindow.Size;
        var sim = _simSys.Simulation;
        SimTickTime.Text = $"{_simSys.SimTickTime.TotalMilliseconds:F3} ms, {sim.LiveParticles} particles, {SimControl.MousePosition}";
        var partAtMouse = sim.GetPlayfieldEntry(SimControl.MousePosition);
        
        if (partAtMouse.Type == ParticleType.None)
        {
            ParticleAnalyzer.RemoveAllChildren();
            _analyzerControl = null;
            _currentlyAnalyzing = null;
            FUCK.MinHeight = MinSize.Y;
            base.Draw(handle);
            return;
        }
        
        if (partAtMouse.Type != _currentlyAnalyzing)
        {
            ParticleAnalyzer.RemoveAllChildren();
            _analyzerControl = (Control) _sandboxHelper.CreateInstance(sim.Implementations[(int) partAtMouse.Type].ParticleAnalyzeControl);
            ParticleAnalyzer.AddChild(_analyzerControl);
            foreach (var style in ParticleAnalyzer.StyleClasses)
            {
                _analyzerControl.AddStyleClass(style);
            }
            _currentlyAnalyzing = partAtMouse.Type;
        }
        
        sim.Implementations[(int) partAtMouse.Type].Analyze(ref sim.Particles[partAtMouse.Id], sim, _analyzerControl);

        FUCK.MinHeight = MinSize.Y;
        base.Draw(handle);
    }
}